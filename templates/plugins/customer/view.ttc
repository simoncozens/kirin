#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.20
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'modtime' => '1282330586',
        'name' => 'plugins/customer/view',
    },
    BLOCK => sub {
        my $context = shift || die "template sub called without context\n";
        my $stash   = $context->stash;
        my $output  = '';
        my $_tt_error;
        
        eval { BLOCK: {
    $output .=  "<h2> Viewing customer ";
    #line 1 "templates/plugins/customer/view"
    $output .=  $stash->get(['customer', 0, 'forename', 0]);
    $output .=  " ";
    #line 1 "templates/plugins/customer/view"
    $output .=  $stash->get(['customer', 0, 'surname', 0]);
    $output .=  "</h2>\n\n<p> <a href=\"/customer/edit\">Edit personal details</a></p>\n\n<h3> Your services</h3>\n";
    #line 25 "templates/plugins/customer/view"
    if ($stash->get(['customer', 0, 'subscriptions', 0])) {
    $output .=  "\n<ul>\n";
    #line 17 "templates/plugins/customer/view"
    
    # FOREACH 
    do {
        my ($_tt_value, $_tt_error, $_tt_oldloop);
        my $_tt_list = $stash->get(['customer', 0, 'subscriptions', 0]);
        
        unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
            $_tt_list = Template::Config->iterator($_tt_list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($_tt_value, $_tt_error) = $_tt_list->get_first();
        eval { $_tt_oldloop = $stash->get('loop') };
        $stash->set('loop', $_tt_list);
        eval {
    LOOP:   while (! $_tt_error) {
                $stash->{'s'} = $_tt_value;
    $output .=  "\n<li> ";
    #line 9 "templates/plugins/customer/view"
    $output .=  $stash->get(['s', 0, 'package', 0, 'name', 0]);
    $output .=  " (Expires ";
    #line 9 "templates/plugins/customer/view"
    $output .=  $stash->get(['s', 0, 'expires', 0, 'ymd', 0]);
    $output .=  ")\n<div class=\"detailswrapper\"><a onclick=\"showDetails(this)\"> Details...</a><div class=\"details\">\n    <ul>\n    ";
    #line 14 "templates/plugins/customer/view"
    
    # FOREACH 
    do {
        my ($_tt_value, $_tt_error, $_tt_oldloop);
        my $_tt_list = $stash->get(['s', 0, 'package', 0, 'services', 0]);
        
        unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
            $_tt_list = Template::Config->iterator($_tt_list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($_tt_value, $_tt_error) = $_tt_list->get_first();
        eval { $_tt_oldloop = $stash->get('loop') };
        $stash->set('loop', $_tt_list);
        eval {
    LOOP:   while (! $_tt_error) {
                $stash->{'service'} = $_tt_value;
    $output .=  "\n        <li> ";
    #line 13 "templates/plugins/customer/view"
    $output .=  $stash->get(['service', 0, 'name', 0]);
    $output .=  "\n    ";;
                ($_tt_value, $_tt_error) = $_tt_list->get_next();
            }
        };
        $stash->set('loop', $_tt_oldloop);
        die $@ if $@;
        $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
        die $_tt_error if $_tt_error;
    };
    
    $output .=  "\n    </ul>\n</div>\n";;
                ($_tt_value, $_tt_error) = $_tt_list->get_next();
            }
        };
        $stash->set('loop', $_tt_oldloop);
        die $@ if $@;
        $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
        die $_tt_error if $_tt_error;
    };
    
    $output .=  "\n</ul>\n<p> You can always <a href=\"/package/list\">register for more\nservices</a>.</p>\n\n";
    }
    else {
    $output .=  "\n<p> You don't seem to have any services! <a href=\"/package/list\">Buy\nsome!</a></p>\n";
    }
    
    $output .=  "\n\n<script>\n\$(\".details\").hide();\nfunction showDetails(e) { \n    \$(e.nextSibling).toggle(\"slow\") }\n</script>\n";
        } };
        if ($@) {
            $_tt_error = $context->catch($@, \$output);
            die $_tt_error unless $_tt_error->type eq 'return';
        }
    
        return $output;
    },
    DEFBLOCKS => {

    },
});
