#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.20
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'modtime' => '1282330586',
        'name' => 'plugins/jobqueue/list',
    },
    BLOCK => sub {
        my $context = shift || die "template sub called without context\n";
        my $stash   = $context->stash;
        my $output  = '';
        my $_tt_error;
        
        eval { BLOCK: {
    $output .=  "<h3> Jobs in the queue</h3>\n\n<table>\n<tr><th>Customer</th> \n    <th>Plugin </th> \n    <th>Method</th> \n    <th>Parameters</th> \n</tr>\n\n";
    #line 21 "templates/plugins/jobqueue/list"
    
    # FOREACH 
    do {
        my ($_tt_value, $_tt_error, $_tt_oldloop);
        my $_tt_list = $stash->get('jobs');
        
        unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
            $_tt_list = Template::Config->iterator($_tt_list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($_tt_value, $_tt_error) = $_tt_list->get_first();
        eval { $_tt_oldloop = $stash->get('loop') };
        $stash->set('loop', $_tt_list);
        eval {
    LOOP:   while (! $_tt_error) {
                $stash->{'j'} = $_tt_value;
    $output .=  "\n<tr>\n<form method=\"post\">\n<input type=\"hidden\" name=\"jid\" value=\"";
    #line 13 "templates/plugins/jobqueue/list"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['j', 0, 'id', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "\">\n<td>";
    #line 14 "templates/plugins/jobqueue/list"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['j', 0, 'customer', 0, 'forename', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  " ";
    #line 14 "templates/plugins/jobqueue/list"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['j', 0, 'customer', 0, 'surname', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "</td>\n<td>";
    #line 15 "templates/plugins/jobqueue/list"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['j', 0, 'plugin', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "</td>\n<td>";
    #line 16 "templates/plugins/jobqueue/list"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['j', 0, 'method', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "</td>\n<td>";
    #line 17 "templates/plugins/jobqueue/list"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['j', 0, 'parameters', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "</td>\n<td> <input name=\"deleting\" type=\"submit\" value=\"Delete Job\"></td>\n</form>\n</tr>\n";;
                ($_tt_value, $_tt_error) = $_tt_list->get_next();
            }
        };
        $stash->set('loop', $_tt_oldloop);
        die $@ if $@;
        $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
        die $_tt_error if $_tt_error;
    };
    
    $output .=  "\n";
        } };
        if ($@) {
            $_tt_error = $context->catch($@, \$output);
            die $_tt_error unless $_tt_error->type eq 'return';
        }
    
        return $output;
    },
    DEFBLOCKS => {

    },
});
